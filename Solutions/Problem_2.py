"""
Author: Ra Cohen (@MxRaCohen)
Date: June 08, 2021
Problem URL: https://projecteuler.net/problem=2
Description: 
Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence 
whose values do not exceed four million, 
find the sum of the even-valued terms.
"""

# Find all Fibonacci terms less than upper bound
def find_fib_list(upper_bound):
	# initialize fib list
	fib_terms = [1, 2]
	# While our largest term is smaller than our bound...
	while fib_terms[-1] < upper_bound:
		# find the index of the next term
		n = len(fib_terms)
		# Calculate the value as the value of the preceding two terms
		fib_terms.append(fib_terms[n - 1] + fib_terms[n - 2])
	# Return everything but the last element (which is greater than our bound)
	return fib_terms[:-1]

# Select the even terms
def evenify_list(input_list):
	# initialize answer list
	output_list = list()
	# loop through input
	for x in input_list:
		# if integer is even
		if x % 2 == 0:
			# Include it in our output list
			output_list.append(x)
	return output_list

# Find the terms, Sum the even terms, and return
def sum_even_fib(upper_bound):
	fib_list = find_fib_list(upper_bound)
	even_fib = evenify_list(fib_list)
	return sum(even_fib)

# Check test solution matches description and generate real answer
print(sum_even_fib(100))
print(sum_even_fib(4000000))
