"""
Author: Ra Cohen (@MxRaCohen)
Date: June 09, 2021
Problem URL: https://projecteuler.net/problem=12
Description: 
The sequence of triangle numbers is generated by adding the natural numbers. 
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""

# Generates triangle numbers with the 'yeild' keyword
def triangle_num() -> int:
	tri_num = 1
	i = 1

	while True:
		yield tri_num
		i += 1
		tri_num += i 

# Factors the given number 
def factor_num(num: int) -> list[int]:
	# Initialize output list
	factors = []

	# Bounds the max factor by the sq_root of num
	upper_bound = int(num ** 0.5) + 1

	for i in range(1, upper_bound):
		if num % i == 0:
			factors.append(i)
			factors.append(num / i)

	return factors

# Finds the first triangle number with n divisors
def find_tri_with_divisors(n: int) -> int:
	# Generates the next triangle number
	for num in triangle_num():
		# Factors the given number 
		factors = factor_num(num)

		# Counts the number of factors
		if len(factors) > n:
			return num


# Check test solution matches description and generate real answer
print(find_tri_with_divisors(5))
print(find_tri_with_divisors(500))
